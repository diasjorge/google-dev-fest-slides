title: Architecture for large scale backbone applications
author: Jean Carlos Meninno & Jorge Dias
description: Managing complexity with backbone applications
date: 2013-10-11

!SLIDE

h1. Architecture for large scale backbone applications

h1. About us

!SLIDE

h2. Jorge Dias

h3. Tech lead developer at XING

* Twitter: "dias_jorge":http://twitter.com/dias_jorge
* Github: "@diasjorge":http://github.com/diasjorge
* Blog: "mrdias.com":http://mrdias.com

!SLIDE

h2. Jean Carlos Meninno

h3. Frontend developer at XING

* Twitter: "@eth0lo":http://twitter.com/eth0lo
* Github: "@eth0lo":http://github.com/eth0lo
* Blog: "meninno.com":http://meninno.com


h1. The good <br/>old days

h2. Not really


!SLIDE

h2. Browser wars

* Incompatible versions
* Global space pollution
* Javascript events in the html

!SLIDE

h2. jQuery and others

* Browser inconsistencies abstracted
* Lots of plugins but often incompatible
* Ad-hoc AJAX handling
* Lack of client side templating

h1. Modern <br/>development

!SLIDE

h2. MV* - Backbone and friends

* Modular structure
* Communication through events
* Consistent interface to backend

!SLIDE

<img src="images/backbone.png" class="no-border"/>

!SLIDE

h2. The good parts

!SLIDE

h2. Models and collections

* Restful interface
* Data and presentation are separated
* Lifecycle events

!SLIDE

h2. Views

* Easy handling of dom events
* React to model/collection events

!SLIDE

h2. History

* No full page reloads
* Push state (where available)
* Back button keeps working

!SLIDE

h2. Others

* Not opinionated
* underscore integration
* jQuery integration
* Fits into existent projects
* Small footprint

!SLIDE

h2. The messy parts

!SLIDE

h2. Zombies

!images/zombies.jpg!

!SLIDE

h2. Types of zombies

* Events
* Views

!SLIDE

h2. Not a framework

* Setup your own conventions
* No clear way to structure your app
* Lacks specialized views
* Make your own framework on top

!SLIDE

h2. Others

* No controllers
* Mixed concerns between views and models
* Huge routers


h1. The Challenge

Rewrite the whole frontend in 4 months.<br/>
Previous version was 1.5 years in development.

!SLIDE

h2. The constraints

* Don't screw up by learning another framework
* Lots of time preassure
* 80% of team was backend


!SLIDE

h2. Alternatives Evaluation

* Marionette
* Chaplin
* Thorax

h1. Marionette JS

h2. What makes Marionette a good choice?

!SLIDE

h2. Dancing applications are awesome

!SLIDE

h2. Documentation

!SLIDE

h2. Clean understandable code

!SLIDE

h2. Memory and events management

!images/zombie-buster.png!

<small>Good bye zombies</small>

!SLIDE

h2. Specialized views

* Layouts
* Region Manager
* Collection/Composite Views
* Item Views

!SLIDE

h2. Controllers

!SLIDE

h2. Event buses

* Commands
* Requests
* Pub/sub

!SLIDE

h2. App routers

* Router composition
* Router as configuration

!SLIDE

h2. Example

<pre><code class="javascript">someController = {
  someMethod: function(){ /*...*/ }
};

Backbone.Marionette.AppRouter.extend({
  controller: someController
  appRoutes: {
    "foo": "someMethod"
  }
});
</code></pre>

h1. Conventions

!SLIDE

h2. Composite applications

!SLIDE

!images/application_tree.png!

!SLIDE

h2. Real Examples

!SLIDE

<img src="images/search.jpg" class="half"/>

<ol>
 <li class="fragment">User clicks on facet</li>
 <li class="fragment">View triggers event</li>
 <li class="fragment">Controller responds updating the search</li>
</ol>

!SLIDE

<img src="images/search.jpg" class="half"/>

<ol>
 <li class="fragment">User clicks on Profile</li>
 <li class="fragment">View triggers event</li>
 <li class="fragment">Controller executes command to navigate</li>
</ol>

!SLIDE

<img src="images/profile.jpg" class="half"/>

<ol>
 <li class="fragment">Profiles app handles the command</li>
 <li class="fragment">Profiles app initializes controller</li>
 <li class="fragment">Controller requests profile model and renders the views</li>
</ol>


!SLIDE

h2. Data layer

* Models and collections contained in one place
* Events all the way
* Everything is a promise

!SLIDE

h2. Core specialized classes

!images/patterns.jpg!

Patterns, patterns and more patterns

!SLIDE

h2. Directory structure

!<images/file_system.png!

* Apps
* Restful structure
* Lib
* Entities
* Templates

h1. Q & A
