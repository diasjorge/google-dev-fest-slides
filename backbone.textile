title: Architecture for large scale backbone applications
author: Jean Carlos Meninno & Jorge Dias
description: Managing complexity with backbone applications
date: 2013-10-11
remote: false

h1. Architecture for Big Backbone Applications

h1. About us

!SLIDE

h2. Jean Carlos Meninno

h3. Frontend developer at XING

* Twitter: "@eth0lo":http://twitter.com/eth0lo
* Github: "@eth0lo":http://github.com/eth0lo
* Blog: "meninno.com":http://meninno.com

!SLIDE

h2. Jorge Dias

h3. Software developer at XING

* Twitter: "dias_jorge":http://twitter.com/dias_jorge
* Github: "@diasjorge":http://github.com/diasjorge
* Blog: "mrdias.com":http://mrdias.com

!SLIDE

<img src="images/backbone.png" class="no-border"/>

!SLIDE

h2. The good parts

* Restful interface
* Lifecycle events for models and collections
* Data and presentation are separated
* Routes handling directly on the browser
* Not opinionated
* Fits into existent projects
* Small footprint

!SLIDE

h2. The messy parts

* Zombies
* No clear structure
* Lots of boilerplate
* Lacks specialized views
* Mixed concerns between views and models
* Setup your own conventions
* Make your own framework on top

h1. The Challenge

Rewrite the whole frontend in 4 months.<br/>
Previous version was 1.5 years in development.

!SLIDE

h2. The constraints

* Don't screw up by learning another framework
* Lots of time pressure
* 80% of team was backend


!SLIDE

h2. Alternatives Evaluation

* Marionette
* Chaplin
* Thorax

!SLIDE

<img src="images/marionette-logo.png" class="no-border"/>

!SLIDE

h2. What makes Marionette a good choice?

!SLIDE

h2. Documentation

!SLIDE

h2. Clean understandable code

!SLIDE

h2. Specialized views

* Layouts
* Region Manager
* Collection/Composite View
* ItemView

!SLIDE

h2. Memory and events management

* Good bye zombies

!SLIDE

h2. Modules

* Application structuring
* Promotes modularity and encapsulation


!SLIDE

h2. Controllers

* General purpose coordinators

!SLIDE

h2. Event buses

!SLIDE

h3. Commands

<pre><code class="javascript">App.commands.setHandler("log:request", function(request){
  console.log(request);
});

// Somewhere else
App.execute("log:request", request);
</code></pre>

!SLIDE

h3. Requests

<pre><code class="javascript">App.reqres.setHandler("foo", function(bar){
  return bar + "-quux";
});

App.request("foo", "baz"); // => returns "baz-quux"
</code></pre>

!SLIDE

h3. Pub/sub

<pre><code class="javascript">vent.on("foo", function(){
  console.log("foo event");
});

vent.trigger("foo"); // => "foo event" appears in console
</code></pre>

!SLIDE

h2. App routers

* Router composition
* Router as configuration

!SLIDE

h2. Example

<pre><code class="javascript">someController = {
  someMethod: function(){ /*...*/ }
};

Backbone.Marionette.AppRouter.extend({
  controller: someController,
  appRoutes: {
    "foo": "someMethod"
  }
});
</code></pre>

h1. Conventions

!SLIDE

h2. Composite applications

!SLIDE

!images/application_tree.png!

!SLIDE

h2. Real Examples

!SLIDE

h2. Presentation Structure

!SLIDE

<img src="images/profile.jpg" class="half"/>

!SLIDE

<img src="images/profile-nav-app.jpg" class="half"/>

!SLIDE

<img src="images/profile-profile-app.jpg" class="half"/>

!SLIDE

<img src="images/profile-profile-app-call-to-actions.jpg" class="half"/>

!SLIDE

<img src="images/profile-profile-app-summary.jpg" class="half"/>

!SLIDE

<img src="images/profile-profile-app-summary-dropdown.jpg" class="half"/>

!SLIDE

<img src="images/profile-profile-app-navigation.jpg" class="half"/>

!SLIDE

<img src="images/profile-profile-app-main-content.jpg" class="half"/>

!SLIDE

<img src="images/search.jpg" class="half"/>

!SLIDE

<img src="images/search-results-collection.jpg" class="half"/>

!SLIDE

<img src="images/search-facets-collection.jpg" class="half"/>

!SLIDE

<img src="images/search-facets-item.jpg" class="half"/>

!SLIDE

h2. Event Handling

!SLIDE

<img src="images/search.jpg" class="half"/>

<ol>
 <li class="fragment">User clicks on facet</li>
 <li class="fragment">View triggers event</li>
 <li class="fragment">Controller responds updating the search</li>
</ol>

!SLIDE

<img src="images/search.jpg" class="half"/>

<ol>
 <li class="fragment">User clicks on Profile</li>
 <li class="fragment">View triggers event</li>
 <li class="fragment">Controller executes command to navigate</li>
</ol>

!SLIDE

<img src="images/profile.jpg" class="half"/>

<ol>
 <li class="fragment">Profiles app handles the command</li>
 <li class="fragment">It initializes controller</li>
 <li class="fragment">Controller requests profile model and renders the views</li>
</ol>


!SLIDE

h2. Data layer

* Models and collections contained in one place
* Events all the way
* Everything is a promise
* Only place that instantiates models/collections

!SLIDE

<pre><code class="javascript">// Inside entities/user
App.reqres.setHandler('user:current:entity', function () {
  return currentUser;
});

// Inside users/show/show_controller
// ...
currentUser = App.request('user:current:entity');
</code></pre>

!SLIDE

<pre><code class="javascript">// Inside entities/search
App.reqres.setHandler('search:new:entity', function () {
  return new Search();
})

// Inside search/new/new_controller
var newSearch = App.request('search:new:entity');
var view = new New.SearchFormView({model: newSearch});
this.layout.mainRegion.show(view)
</code></pre>

!SLIDE

h2. Core specialized classes

!images/patterns.jpg!

Patterns, patterns and more patterns

!SLIDE

h2. Examples

* Dropdowns
* Forms
* Layouts
* Modals
* Tooltips
* etc

!SLIDE two-columns
h2. Directory structure

<img src="images/file_system.png" class="short inline" />

* Apps
* Restful structure
* Lib
* Entities
* Templates

h1. Thank you

!images/cat-fail.jpg!

<small>Cat picture for presentation completeness</small>

<h1 class="full">
  Q & A
</h1>
